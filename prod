#!/bin/bash
# Opinionated Software 2019

RED=`tput setaf 1`
GREEN=`tput setaf 2`
BLUE=`tput setaf 4`
RESET_COLOR=`tput sgr0`

function do_bash {
  # Use this to run bash commands directly to api container
  docker-compose -f prod.docker-compose.yml exec api bash -c "$1"
}

function manage {
    # A shortcut to run python manage.py commands in api container
    do_bash "python manage.py $1"
}

function test {
  # this function accepts a parameter as manage.py test would do
  echo "Running tests..."
  manage "test $1"
}

function delete_migrations {
  docker-compose -f prod.docker-compose.yml exec api find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
  docker-compose -f prod.docker-compose.yml exec api find . -path "*/migrations/*.pyc"  -delete
}

function remigrate {
    echo "Deleting migrations"
    delete_migrations
    echo "Deleting db..."
    docker-compose -f prod.docker-compose.yml rm -sf db
    echo "${BLUE}Wake up db! wake up!${RESET_COLOR}"
    docker-compose -f prod.docker-compose.yml up -d db
    echo "${BLUE}Good morning! -db${RESET_COLOR}"
    migrate
}

function restart {
  docker-compose -f prod.docker-compose.yml stop
  docker-compose -f prod.docker-compose.yml up -d
}

function create_superuser {
  echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'password', first_name='admin')" | docker-compose -f prod.docker-compose.yml exec -T api bash -c "python manage.py shell"
}

function usage {
    echo "ERROR: Please check the \"do\" file for options"
    exit 1
}

# FUNCTIONS FOR EVERYDAY USE

function collectstatic {
  # Use this if there are changes in "api" staticfiles
  manage "collectstatic --noinput"
}

function api_bash {
  # Use this if you want to access the bash of "api"
  docker-compose -f prod.docker-compose.yml exec api bash
}

function npm_bash {
  # Use this if you want to access the bash of "frontend"
  docker-compose -f prod.docker-compose.yml exec frontend bash
}

function shell {
  # Use this if you want to access django shell
  manage shell
}

function manage {
  # A shortcut to run python manage.py commands in api container
  do_bash "python manage.py $1"
}

function migrate {
  # Use this if there are changes in the model
  echo "Creating migrations..."
  manage makemigrations --noinput
  while [ $? -ne 0 ]
  do
    echo "${BLUE}Retrying! Don't worry this is normal :)${RESET_COLOR}"
    manage makemigrations --noinput
  done
  manage migrate
}

function pip {
  # Use this if there are new python packages
  echo "Installing requirements..."
  do_bash "pip install -r requirements.txt"
}

function npm_install {
  # Use this if there are new npm packages
  docker-compose exec frontend npm install
}

function reset_all {
  # Use this if you want to do it all (this takes time)
  restart
  pip
  migrate
  collectstatic
  systemctl reload nginx
}

function logs {
  # Use this if you want to follow the logs of all containers
  docker-compose -f prod.docker-compose.yml logs -f --tail=1000
}

function pull_and_deploy {
  git pull
  systemctl reload nginx
}


# Set functions as parameter
if [[ "$#" -eq 0 ]]; then
    usage
else
    $@
fi
